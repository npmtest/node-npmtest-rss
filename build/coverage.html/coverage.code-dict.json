{"/home/travis/build/npmtest/node-npmtest-rss/test.js":"/* istanbul instrument in package npmtest_rss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rss/lib.npmtest_rss.js":"/* istanbul instrument in package npmtest_rss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rss = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rss = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rss/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rss && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rss\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rss.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_rss.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rss.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_rss.__dirname +\n                    '/lib.npmtest_rss.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rss/node_modules/rss/lib/index.js":"'use strict';\n\nvar mime = require('mime-types');\nvar xml = require('xml');\nvar fs = require('fs');\n\n\nfunction ifTruePush(bool, array, data) {\n    if (bool) {\n        array.push(data);\n    }\n}\n\nfunction ifTruePushArray(bool, array, dataArray) {\n  if(!bool) {\n    return;\n  }\n\n  dataArray.forEach(function(item) {\n    ifTruePush(item, array, item);\n  });\n}\n\nfunction getSize(filename) {\n    if (typeof fs === 'undefined') {\n        return 0;\n    }\n    return fs.statSync(filename).size;\n}\n\nfunction generateXML (data){\n\n    var channel = [];\n    channel.push({ title:           { _cdata: data.title } });\n    channel.push({ description:     { _cdata: data.description || data.title } });\n    channel.push({ link:            data.site_url || 'http://github.com/dylang/node-rss' });\n    // image_url set?\n    if (data.image_url) {\n        channel.push({ image:  [ {url: data.image_url}, {title: data.title},  {link: data.site_url} ] });\n    }\n    channel.push({ generator:       data.generator });\n    channel.push({ lastBuildDate:   new Date().toUTCString() });\n\n    ifTruePush(data.feed_url, channel, { 'atom:link': { _attr: { href: data.feed_url, rel: 'self', type: 'application/rss+xml' } } });\n    ifTruePush(data.author, channel, { 'author': { _cdata: data.author } });\n    ifTruePush(data.pubDate, channel, { 'pubDate': new Date(data.pubDate).toGMTString() });\n    ifTruePush(data.copyright, channel, { 'copyright':  { _cdata: data.copyright } });\n    ifTruePush(data.language, channel, { 'language': { _cdata: data.language } });\n    ifTruePush(data.managingEditor, channel, { 'managingEditor': { _cdata: data.managingEditor } });\n    ifTruePush(data.webMaster, channel, { 'webMaster': { _cdata: data.webMaster } });\n    ifTruePush(data.docs, channel, { 'docs': data.docs });\n    ifTruePush(data.ttl, channel, { 'ttl': data.ttl });\n    ifTruePush(data.hub, channel, { 'atom:link': { _attr: { href: data.hub, rel: 'hub' } } });\n\n    if (data.categories) {\n        data.categories.forEach(function(category) {\n            ifTruePush(category, channel, { category: { _cdata: category } });\n        });\n    }\n\n    ifTruePushArray(data.custom_elements, channel, data.custom_elements);\n\n    data.items.forEach(function(item) {\n        var item_values = [\n                    { title:        { _cdata: item.title } }\n                ];\n        ifTruePush(item.description, item_values, { description:  { _cdata: item.description } });\n        ifTruePush(item.url, item_values, { link: item.url });\n        ifTruePush(item.link || item.guid || item.title, item_values, { guid:         [ { _attr: { isPermaLink: !item.guid && !!item.url } }, item.guid || item.url || item.title ]  });\n\n        item.categories.forEach(function(category) {\n            ifTruePush(category, item_values, { category: { _cdata: category } });\n        });\n\n        ifTruePush(item.author || data.author, item_values, { 'dc:creator': { _cdata: item.author || data.author } });\n        ifTruePush(item.date, item_values, { pubDate:      new Date(item.date).toGMTString() });\n\n        //Set GeoRSS to true if lat and long are set\n        data.geoRSS = data.geoRSS || (item.lat && item.long);\n        ifTruePush(item.lat, item_values, {'geo:lat': item.lat});\n        ifTruePush(item.long, item_values, {'geo:long': item.long});\n\n        if( item.enclosure && item.enclosure.url) {\n            if( item.enclosure.file ) {\n                item_values.push({\n                    enclosure : {\n                        _attr : {\n                            url : item.enclosure.url,\n                            length : item.enclosure.size || getSize(item.enclosure.file),\n                            type : item.enclosure.type || mime.lookup(item.enclosure.file)\n                        }\n                    }\n                });\n            } else {\n                item_values.push({\n                    enclosure : {\n                        _attr : {\n                            url : item.enclosure.url,\n                            length : item.enclosure.size || 0,\n                            type : item.enclosure.type || mime.lookup(item.enclosure.url)\n                        }\n                    }\n                });\n            }\n        }\n\n        ifTruePushArray(item.custom_elements, item_values, item.custom_elements);\n\n        channel.push({ item: item_values });\n\n    });\n\n    //set up the attributes for the RSS feed.\n    var _attr = {\n        'xmlns:dc':         'http://purl.org/dc/elements/1.1/',\n        'xmlns:content':    'http://purl.org/rss/1.0/modules/content/',\n        'xmlns:atom':       'http://www.w3.org/2005/Atom',\n        version: '2.0'\n    };\n\n    Object.keys(data.custom_namespaces).forEach(function(name) {\n      _attr['xmlns:' + name] = data.custom_namespaces[name];\n    });\n\n    //only add namespace if GeoRSS is true\n    if(data.geoRSS){\n        _attr['xmlns:geo'] = 'http://www.w3.org/2003/01/geo/wgs84_pos#';\n    }\n\n    return {\n        rss: [\n            { _attr: _attr },\n            { channel: channel }\n        ]\n    };\n}\n\nfunction RSS (options, items) {\n    options = options || {};\n\n    this.title              = options.title || 'Untitled RSS Feed';\n    this.description        = options.description || '';\n    this.generator          = options.generator || 'RSS for Node';\n    this.feed_url           = options.feed_url;\n    this.site_url           = options.site_url;\n    this.image_url          = options.image_url;\n    this.author             = options.author;\n    this.categories         = options.categories;\n    this.pubDate            = options.pubDate;\n    this.hub                = options.hub;\n    this.docs               = options.docs;\n    this.copyright          = options.copyright;\n    this.language           = options.language;\n    this.managingEditor     = options.managingEditor;\n    this.webMaster          = options.webMaster;\n    this.ttl                = options.ttl;\n    //option to return feed as GeoRSS is set automatically if feed.lat/long is used\n    this.geoRSS             = options.geoRSS || false;\n    this.custom_namespaces  = options.custom_namespaces || {};\n    this.custom_elements    = options.custom_elements || [];\n    this.items              = items || [];\n\n    this.item = function (options) {\n        options = options || {};\n        var item = {\n            title:            options.title || 'No title',\n            description:      options.description || '',\n            url:              options.url,\n            guid:             options.guid,\n            categories:       options.categories || [],\n            author:           options.author,\n            date:             options.date,\n            lat:              options.lat,\n            long:             options.long,\n            enclosure:        options.enclosure || false,\n            custom_elements:  options.custom_elements || []\n        };\n\n        this.items.push(item);\n        return this;\n    };\n\n    this.xml = function(indent) {\n        return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' +\n            xml(generateXML(this), indent);\n    };\n}\n\nmodule.exports = RSS;\n","/home/travis/build/npmtest/node-npmtest-rss/node_modules/rss/Gruntfile.js":"'use strict';\n\nmodule.exports = function(grunt) {\n\n    /**\n     * grunt release or grunt release:patch increment the patch number\n     * grunt release:minor increments the minor version number\n     * grunt release:major increments the major version number\n     *\n\n     * grunt readme to generate the readme (you might need to do grunt repos first)\n     */\n\n\n    require('time-grunt')(grunt);\n\n    grunt.initConfig({\n        jshint: {\n            options: {\n                jshintrc: '.jshintrc'\n            },\n            all: [\n                'Gruntfile.js',\n                'lib/**/*.js',\n                'test/**/*.js'\n            ]\n        },\n        release: {\n            github: {\n                repo: 'dylang/node-rss',\n                accessTokenVar: 'GITHUB_ACCESS_TOKEN'\n            }\n        }\n    });\n\n    require('load-grunt-tasks')(grunt);\n\n    grunt.registerTask('lint', [\n        'jshint'\n    ]);\n\n    grunt.registerTask('default', [\n        'lint'\n    ]);\n\n    grunt.registerTask('pre-publish', [\n        'lint',\n        'repos',\n        'readme'\n    ]);\n};\n"}